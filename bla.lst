     1                                  	global	ft_strcmp
     2                                  
     3                                  	section	.text
     4                                  
     5                                  ft_strcmp:
     6 00000000 4831C0                  	xor		rax, rax				; je mets rax a 0
     7                                  next:
     8 00000003 803C0700                	cmp		byte [rdi + rax], 0		; je compare s1 avec 0 : rdi = s1
     9 00000007 7415                    	je		zero_zero				; si rdi == 0 je vais sur la partie zero_zero
    10                                  next_2:
    11 00000009 8A0C07                  	mov		cl, byte [rdi + rax]	; je mets dans cl(partie 1 byte low de rcx) 1 byte de rdi
    12 0000000C 8A1406                  	mov		dl, byte [rsi + rax]	; je mets dans dl(partie 1 byte low de rdx) 1 byte de rsi
    13 0000000F 48FFC0                  	inc		rax						; j'incrémente rax
    14 00000012 38D1                    	cmp		cl, dl					; je compare les daux bytes de rdi et rsi
    15 00000014 74ED                    	je		next					; si cl == dl je vais à la partie next
    16 00000016 7F18                    	jg		sup						; si cl > dl je vais sur sup
    17 00000018 B8FFFFFFFF              	mov		eax, -1					; je mets -1 dans eax, et je peus car eax est signé
    18                                  end:
    19 0000001D C3                      	ret								; fin de la fonction
    20                                  
    21                                  zero_zero:
    22 0000001E 803C0600                	cmp		byte [rsi + rax], 0		; je compare s2 avec 0 : rsi = s2
    23 00000022 7402                    	je		pass_zero				; si rsi == 0 je vais a la partie pass_zero
    24 00000024 EBE3                    	jmp		next_2
    25                                  
    26                                  pass_zero:
    27 00000026 4831C0                  	xor		rax, rax				; je mets rax a 0 ?pas sur de l'utilité?
    28 00000029 B800000000              	mov		eax, 0					; je mets 0 dans eax, car je renvoie un int
    29 0000002E EBED                    	jmp		end						; je vais a la partie end
    30                                  sup:
    31 00000030 B801000000              	mov		eax, 1					; je mets dans eax , car je renvoie un int
    32 00000035 EBE6                    	jmp		end						; je vais à la partie end
