     1                                  	global	main
     2                                  	extern	printf
     3                                  	extern	puts
     4                                  
     5                                  	section	.data
     6 00000000 6C6120666F6E637469-     		mes_error	db	"la fonction doit prendre 1 seul param√©tre", 0
     6 00000009 6F6E20646F69742070-
     6 00000012 72656E647265203120-
     6 0000001B 7365756C2070617261-
     6 00000024 6DC3A974726500     
     7 0000002B 6365206D6F74206F75-     		mes			db	"ce mot ou cette phrase est un palindrome", 0
     7 00000034 206365747465207068-
     7 0000003D 726173652065737420-
     7 00000046 756E2070616C696E64-
     7 0000004F 726F6D6500         
     8 00000054 6365206D6F74206F75-     		mes_error2	db	"ce mot ou cette phrase n'est pas un palindrome", 0
     8 0000005D 206365747465207068-
     8 00000066 72617365206E276573-
     8 0000006F 742070617320756E20-
     8 00000078 70616C696E64726F6D-
     8 00000081 6500               
     9 00000083 6365207369676E6520-     		dash		db	"ce signe est dash", 0
     9 0000008C 657374206461736800 
    10 00000095 25630A00                		mess		db	"%c", 10, 0
    11 00000099 25640A00                		prints		db	"%d", 10, 0
    12                                  	
    13                                  	section	.text
    14                                  main:
    15 00000000 B802000000              	mov		rax, 2
    16 00000005 4839C7                  	cmp		rdi, rax
    17 00000008 0F8590000000            	jne		error_1
    18 0000000E 4883C608                	add		rsi, 8
    19 00000012 488B1E                  	mov		rbx, [rsi]
    20 00000015 4831C9                  	xor		rcx, rcx
    21 00000018 4D31C0                  	xor		r8, r8
    22                                  loop_1:
    23 0000001B 8B040B                  	mov		eax, dword[rbx + rcx]
    24 0000001E 3DE2809300              	cmp		eax, 9666786
    25 00000023 0F84B3000000            	je		kaboum
    26                                  next_3:
    27 00000029 4831C0                  	xor		rax, rax
    28 0000002C 8A040B                  	mov		al, byte [rbx + rcx]
    29 0000002F 480FB6C0                	movzx	rax, al
    30 00000033 4883F800                	cmp		rax, 0
    31 00000037 7407                    	je		loop_2
    32 00000039 50                      	push	rax
    33 0000003A 4883C101                	add		rcx, 1
    34 0000003E EBDB                    	jmp		loop_1
    35                                  loop_2:
    36 00000040 428B0403                	mov		eax, dword[rbx + r8]
    37 00000044 3DE2809300              	cmp		eax, 9666786
    38 00000049 0F84A0000000            	je		kaboume
    39 0000004F 4831C0                  	xor		rax, rax
    40 00000052 428A0403                	mov		al, byte [rbx + r8]
    41 00000056 3C2D                    	cmp		al, 45
    42 00000058 7479                    	je		next_2
    43 0000005A 3C2C                    	cmp		al, 44
    44 0000005C 7475                    	je		next_2
    45 0000005E 3C21                    	cmp		al, 33
    46 00000060 7471                    	je		next_2
    47 00000062 3C20                    	cmp		al, 32
    48 00000064 746D                    	je		next_2
    49                                  loop_4:
    50 00000066 4831C0                  	xor		rax, rax
    51 00000069 58                      	pop		rax
    52 0000006A 4883F82D                	cmp		rax, 45
    53 0000006E 7457                    	je		next
    54 00000070 4883F82C                	cmp		rax, 44
    55 00000074 7451                    	je		next
    56 00000076 4883F821                	cmp		rax, 33
    57 0000007A 744B                    	je		next
    58 0000007C 4883F820                	cmp		rax, 32
    59 00000080 7445                    	je		next
    60 00000082 423A0403                	cmp		al, byte [rbx + r8]
    61 00000086 7527                    	jne		error_2
    62 00000088 4983C001                	add		r8, 1
    63 0000008C E2B2                    	loop	loop_2
    64                                  print:
    65 0000008E 48BF-                   	mov		rdi, mes
    65 00000090 [2B00000000000000] 
    66 00000098 E8(00000000)            	call	puts
    67                                  end:
    68 0000009D C3                      	ret
    69                                  
    70                                  error_1:
    71 0000009E 48BF-                   	mov		rdi, mes_error
    71 000000A0 [0000000000000000] 
    72 000000A8 E8(00000000)            	call	puts
    73 000000AD EBEE                    	jmp		end
    74                                  
    75                                  error_2:
    76 000000AF 4883E901                	sub		rcx, 1
    77                                  loop_3:
    78 000000B3 58                      	pop		rax
    79 000000B4 E2FD                    	loop	loop_3
    80 000000B6 48BF-                   	mov		rdi, mes_error2
    80 000000B8 [5400000000000000] 
    81 000000C0 E8(00000000)            	call	puts
    82 000000C5 EBD6                    	jmp		end
    83                                  
    84                                  next:
    85 000000C7 4883E901                	sub		rcx, 1
    86 000000CB 4883F900                	cmp		rcx, 0
    87 000000CF 7595                    	jne		loop_4
    88 000000D1 EBBB                    	jmp		print
    89                                  next_2:
    90 000000D3 4983C001                	add		r8, 1
    91 000000D7 E964FFFFFF              	jmp		loop_2
    92                                  
    93                                  
    94                                  kaboum:
    95 000000DC 4883C103                	add		rcx, 3
    96 000000E0 803C0B00                	cmp		byte [rbx + rcx], 0
    97 000000E4 0F8456FFFFFF            	je		loop_2
    98 000000EA E92CFFFFFF              	jmp		loop_1
    99                                  kaboume:
   100 000000EF 4883E903                	sub		rcx, 3
   101 000000F3 4983C003                	add		r8, 3
   102 000000F7 4883F900                	cmp		rcx, 0
   103 000000FB 7491                    	je		print
   104 000000FD E93EFFFFFF              	jmp		loop_2
